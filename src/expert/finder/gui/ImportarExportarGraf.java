/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expert.finder.gui;

import java.io.File;
import java.io.IOException;
import javax.imageio.IIOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author marc.garrido.casas
 */
public class ImportarExportarGraf extends javax.swing.JFrame {
    private final ControladorPresentacio controladorPresentacio;

    /**
     * Creates new form ImportarExportarGraf
     */
    public ImportarExportarGraf(ControladorPresentacio controladorPresentacio) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.controladorPresentacio = controladorPresentacio;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bImportarGraf = new javax.swing.JButton();
        bExportarGraf = new javax.swing.JButton();
        bEnrere = new javax.swing.JButton();
        bImportarGrafObjecte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bImportarGraf.setText("Importar Graf");
        bImportarGraf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bImportarGrafActionPerformed(evt);
            }
        });

        bExportarGraf.setText("Exportar Graf");
        bExportarGraf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportarGrafActionPerformed(evt);
            }
        });

        bEnrere.setText("Enrere");
        bEnrere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bEnrereActionPerformed(evt);
            }
        });

        bImportarGrafObjecte.setText("Importar Graf Objecte");
        bImportarGrafObjecte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bImportarGrafObjecteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(bEnrere))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bExportarGraf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bImportarGraf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bImportarGrafObjecte, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(bImportarGraf, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bImportarGrafObjecte, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(bExportarGraf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(bEnrere)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bExportarGrafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportarGrafActionPerformed
        // TODO add your handling code here:
        JFileChooser explorador = new JFileChooser();
        int opcio = explorador.showOpenDialog(null);
        if (opcio == JFileChooser.APPROVE_OPTION) {
            File fitxer = explorador.getSelectedFile();
            String rutaFitxer = fitxer.getAbsolutePath();
            try {
                controladorPresentacio.exportar_graf(rutaFitxer);  
                JOptionPane.showMessageDialog(this, "Exportacio completada");            
            } catch (IOException ex) {            
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }        
        }
    }//GEN-LAST:event_bExportarGrafActionPerformed

    private void bEnrereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bEnrereActionPerformed
        // TODO add your handling code here:
        Menu menu = new Menu(this.controladorPresentacio);
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bEnrereActionPerformed

    private void bImportarGrafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bImportarGrafActionPerformed
        JFileChooser explorador = new JFileChooser();
        explorador.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);        
        int opcio = explorador.showOpenDialog(null);
        if (opcio == JFileChooser.APPROVE_OPTION) {
            File fitxer = explorador.getSelectedFile();
            String rutaFitxer = fitxer.getAbsolutePath();

            try {
                controladorPresentacio.importar_graf(rutaFitxer, true);  
                JOptionPane.showMessageDialog(this, "Importacio completada");            
            } catch (IOException ex) {            
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_bImportarGrafActionPerformed

    private void bImportarGrafObjecteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bImportarGrafObjecteActionPerformed
        JFileChooser explorador = new JFileChooser();        
        int opcio = explorador.showOpenDialog(null);
        if (opcio == JFileChooser.APPROVE_OPTION) {
            File fitxer = explorador.getSelectedFile();
            String rutaFitxer = fitxer.getAbsolutePath();

            try {
                controladorPresentacio.importar_graf(rutaFitxer, false);  
                JOptionPane.showMessageDialog(this, "Importacio completada");            
            } catch (IOException ex) {            
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_bImportarGrafObjecteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEnrere;
    private javax.swing.JButton bExportarGraf;
    private javax.swing.JButton bImportarGraf;
    private javax.swing.JButton bImportarGrafObjecte;
    // End of variables declaration//GEN-END:variables
}
