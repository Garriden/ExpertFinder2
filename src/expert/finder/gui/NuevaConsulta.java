/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expert.finder.gui;


import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NEW
 */
public class NuevaConsulta extends javax.swing.JFrame {

    /**
     * Creates new form NuevaConsulta
     */
    
    private final ControladorPresentacio controladorPresentacio;
    private String tipusConsulta = null;
    private String cami = null;
    private int nodeOrigen = -1;
    private int nodeDesti = -1;
    private int nodeNou = -1;
    private String descripcio = null;
    private double grauRellevancia = -1;
    
    //nueva consulta desde el inicio
    public NuevaConsulta(ControladorPresentacio controladorPresentacio){
        tipusConsulta = "Consulta Basica";
        initComponents();
        new_init_components();
        this.setLocationRelativeTo(null);
        this.controladorPresentacio = controladorPresentacio;
        inicialitzar_taula_camins();   
    }
    
    
    // nueva consulta3 a partir del grado de relevancia de consulta anterior;
    public NuevaConsulta(ControladorPresentacio controladorPresentacio, int numeroResultat, double grauRellevancia) {
        this.controladorPresentacio = controladorPresentacio;
        initComponents();
        ArrayList<String> consultes = this.controladorPresentacio.get_consultes();
        String consulta = consultes.get(numeroResultat);
        tipusConsulta = "Consulta Basica";
        TipusBox.setSelectedItem("Consulta Basica");
        
        int primeraBarra = consulta.indexOf('|');
        int segonaBarra = consulta.indexOf("|", primeraBarra+1);
        int terceraBarra = consulta.indexOf("|", segonaBarra+1);
        int cuartaBarra = consulta.indexOf("|", terceraBarra+1);
        cami = consulta.substring(terceraBarra+1, cuartaBarra);

        System.out.println(cami);
        
        umbral_init_components();
        
        this.setLocationRelativeTo(null);
        
        umbral_taula_camins();
        
        this.grauRellevancia = grauRellevancia;
            if(this.grauRellevancia > 0 && this.grauRellevancia < 1){ 
                String gr = Double.toString(grauRellevancia);
                GrauRellevancia.setText(String.valueOf(gr));
                umbral_inicialitzar_taula_node_origen();
            }
            //sino vuelve a principal
            else{
                GuiGestionConsulta menu = new GuiGestionConsulta(this.controladorPresentacio);
                menu.setVisible(true);
                this.dispose();
            }
        
    }
    

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        TipusBox = new javax.swing.JComboBox<>();
        TextDescripcio = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableCami = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableNodoOrigen = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableNodoDestino = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableNuevoNodo = new javax.swing.JTable();
        GrauRellevancia = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ejecutar = new javax.swing.JButton();
        torna = new javax.swing.JButton();
        select = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Tipo");

        TipusBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Consulta Basica", "Consulta Umbral", "Consulta Tres Nodos" }));
        TipusBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipusBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Descripci√≥n");

        jLabel3.setText("Selecciona un camino");

        TableCami.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Cami", "Descripcio", "Clausura"
            }
        ));
        jScrollPane1.setViewportView(TableCami);

        jLabel4.setText("Selecciona un nodo Origen");

        TableNodoOrigen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom"
            }
        ));
        jScrollPane2.setViewportView(TableNodoOrigen);

        jLabel5.setText("Selecciona un nodo Destino");

        TableNodoDestino.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom"
            }
        ));
        jScrollPane3.setViewportView(TableNodoDestino);

        jLabel6.setText("Selecciona un nuevo nodo");

        TableNuevoNodo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nom"
            }
        ));
        jScrollPane4.setViewportView(TableNuevoNodo);

        GrauRellevancia.setToolTipText("");
        GrauRellevancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrauRellevanciaActionPerformed(evt);
            }
        });

        jLabel7.setText("Grado de relevancia");

        ejecutar.setText("Ejecutar");
        ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ejecutarActionPerformed(evt);
            }
        });

        torna.setText("Tornar");
        torna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tornaActionPerformed(evt);
            }
        });

        select.setText("Select");
        select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(128, 128, 128)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)))
                            .addComponent(GrauRellevancia, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TipusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(98, 98, 98)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(TextDescripcio, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(torna)
                            .addComponent(select))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ejecutar)
                                .addGap(356, 356, 356))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TipusBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextDescripcio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(select)))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GrauRellevancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(torna)
                    .addComponent(ejecutar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TipusBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TipusBoxActionPerformed
        // TODO add your handling code here:
        tipusConsulta = (String)TipusBox.getSelectedItem();
    }//GEN-LAST:event_TipusBoxActionPerformed

    private void tornaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tornaActionPerformed
        // TODO add your handling code here:
        GuiGestionConsulta menu = new GuiGestionConsulta(this.controladorPresentacio);
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tornaActionPerformed

    private void selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectActionPerformed
        // TODO add your handling code here:
        if (TableCami.getSelectedRow() != -1){
            cami = Integer.toString(TableCami.getSelectedRow()+1);
                    
            tipusConsulta = (String)TipusBox.getSelectedItem();
            System.out.println(tipusConsulta);
            TipusBox.setEnabled(false);
            switch(tipusConsulta){
                case "Consulta Basica": 
                    inicialitzar_taula_node_origen(false);
                    TableCami.setEnabled(true);
                    TableNodoOrigen.setEnabled(true);
                    TableNodoDestino.setEnabled(false);
                    TableNuevoNodo.setEnabled(false);
                    GrauRellevancia.setEnabled(false);
                    break;
                case "Consulta Umbral":
                    inicialitzar_taula_node_origen(false);
                    TableCami.setEnabled(true);
                    TableNodoOrigen.setEnabled(true);
                    TableNodoDestino.setEnabled(false);
                    TableNuevoNodo.setEnabled(false);
                    GrauRellevancia.setEnabled(true);
                    break;
                case "Consulta Tres Nodos":
                    inicialitzar_taula_node_origen(false);
                    inicialitzar_taula_node_desti();
                    inicialitzar_taula_node_origen(true);
                    TableCami.setEnabled(true);
                    TableNodoOrigen.setEnabled(true);
                    TableNodoDestino.setEnabled(true);
                    TableNuevoNodo.setEnabled(true);
                    GrauRellevancia.setEnabled(false);
                    break;
            }
        }
        else JOptionPane.showMessageDialog(this, "No hi ha cap cam√≠ seleccionat.");

    }//GEN-LAST:event_selectActionPerformed

    private void ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ejecutarActionPerformed
        // TODO add your handling code here:
        ArrayList<String> resultat = new ArrayList<String>();
        boolean ejecutar = true;
        if (cami == null) JOptionPane.showMessageDialog(this, "No hi ha cap cam√≠ seleccionat.");
        else{
            if(TableNodoOrigen.getSelectedRow() == -1) JOptionPane.showMessageDialog(this, "No hi ha cap node origen seleccionat.");
            else{
                nodeOrigen = TableNodoOrigen.getSelectedRow();
                System.out.println(cami);
                System.out.println(nodeOrigen);
                System.out.println(TextDescripcio.getText());
                    switch(tipusConsulta){
                        case "Consulta Basica": 
                            resultat = this.controladorPresentacio.executa_consulta_tipo1(nodeOrigen, cami, TextDescripcio.getText());
                            break;
                        case "Consulta Umbral":
                            System.out.println(GrauRellevancia.getText());
                            //try catch...
                            grauRellevancia = Double.parseDouble(GrauRellevancia.getText());
                            if(grauRellevancia < 0 || grauRellevancia > 1){
                                JOptionPane.showMessageDialog(this, "El grau de rellevancia introduit no √©s valid, ha de estar entre 0 i 1 ambd√≥s inclosos.");
                                ejecutar = false;
                            }
                            else resultat = this.controladorPresentacio.executa_consulta_tipo2(nodeOrigen, cami, grauRellevancia, TextDescripcio.getText());

                            break;
                        case "Consulta Tres Nodos":
                            if(TableNodoDestino.getSelectedRow() == -1){ 
                                JOptionPane.showMessageDialog(this, "No hi ha cap node dest√≠ seleccionat.");
                                ejecutar = false;
                            }
                            else{
                                nodeDesti = TableNodoDestino.getSelectedRow();
                                if(TableNuevoNodo.getSelectedRow() == -1){
                                    JOptionPane.showMessageDialog(this, "No hi ha cap nou node origen seleccionat.");
                                    ejecutar = false;
                                }
                                else{
                                    nodeNou = TableNuevoNodo.getSelectedRow();
                                    if(nodeNou == nodeOrigen){
                                        JOptionPane.showMessageDialog(this, "El node origen y nou node origen no poden ser iguals.");
                                        ejecutar = false;
                                    }
                                    else resultat = this.controladorPresentacio.executa_consulta_tipo3(nodeOrigen, cami, nodeDesti, nodeNou, TextDescripcio.getText());
                                    
                                }
                            }
                            break;
                    }
            
                if(ejecutar){
                    GuiResultat menu = new GuiResultat(this.controladorPresentacio, 
                        this.controladorPresentacio.get_nombre_consultes()-1, true);
                    menu.setVisible(true);
                    this.dispose();
                }
            }
        }
    }//GEN-LAST:event_ejecutarActionPerformed

    private void GrauRellevanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrauRellevanciaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GrauRellevanciaActionPerformed

    
    private void new_init_components(){
        TipusBox.setEnabled(true);
        TableCami.setEnabled(true);
        TableNodoOrigen.setEnabled(false);
        TableNodoDestino.setEnabled(false);
        TableNuevoNodo.setEnabled(false);
        GrauRellevancia.setEnabled(false);        
    }
    
    private void umbral_init_components(){
        TipusBox.setEnabled(false);
        TableCami.setEnabled(false);
        select.setEnabled(false);
        TableNodoOrigen.setEnabled(true);
        TableNodoDestino.setEnabled(false);
        TableNuevoNodo.setEnabled(false);
        GrauRellevancia.setEnabled(false);  
    }
    
    
    private void umbral_taula_camins() {
        String column_names[]= {"Id","Cami","Descripcio", "Clausura"};
        DefaultTableModel table_model=new DefaultTableModel(column_names, 0);
        ArrayList<String> camins = this.controladorPresentacio.get_camins();
        boolean trobat = false;
        for(int i = 0; i < camins.size() && !trobat; ++i){
            String camiCodificat = camins.get(i);
            
            String cami1 = camiCodificat.substring(0, camiCodificat.indexOf('|'));
            if(cami1.equals(cami)){
                cami = Integer.toString(i+1);
                table_model.addRow(new Object [] {cami, cami1, "cami unic", "Si"});
                trobat = true;
            }            
        }
        
        TableCami.setModel(table_model);
    }
    
    
    
    private void inicialitzar_taula_camins() {
        String column_names[]= {"Id","Cami","Descripcio", "Clausura"};
        DefaultTableModel table_model=new DefaultTableModel(column_names, 0);
        ArrayList<String> camins = this.controladorPresentacio.get_camins();
        
        for(int i = 0; i < camins.size(); ++i){
            String camiCodificat = camins.get(i);
            
            String cami1 = camiCodificat.substring(0, camiCodificat.indexOf('|'));
            String descripcio1 = camiCodificat.substring(camiCodificat.indexOf('|')+1, camiCodificat.indexOf("|", camiCodificat.indexOf('|')+1));
            
            table_model.addRow(new Object [] {i+1, cami1, descripcio1, "Si"});            
        }
        
        TableCami.setModel(table_model);
    }
    
    
    private void umbral_inicialitzar_taula_node_origen() {
        
            String column_names[]= {"Id","Nom"};
            DefaultTableModel table_model = new DefaultTableModel(column_names, 0);
            String cami1 = cami;
            String tipusNode = "";
            if (cami1.charAt(0) == 'P') tipusNode = "Paper";
            else if (cami1.charAt(0) == 'T') tipusNode = "Terme";
            else if (cami1.charAt(0) == 'C') tipusNode = "Conferencia";            
            else tipusNode = "Autor";
            
            ArrayList<String> nodes = controladorPresentacio.get_nodes(tipusNode);        
            for(int i = 0; i < nodes.size(); ++i){
                String node = nodes.get(i);
                String id = node.substring(0, node.indexOf('|'));
                String nom = node.substring(node.indexOf('|')+1, node.length());            
                table_model.addRow(new Object [] {id, nom});
            }

            TableNodoOrigen.setModel(table_model);
        
    }
    
    
    
    
    
    private void inicialitzar_taula_node_origen(boolean nou) {
        
            String column_names[]= {"Id","Nom"};
            DefaultTableModel table_model = new DefaultTableModel(column_names, 0);
            //peligro
            ArrayList<String> camins = this.controladorPresentacio.get_camins();
            String camicod1 = camins.get(TableCami.getSelectedRow());
            String cami1 = camicod1.substring(0, camicod1.indexOf("|"));
            String tipusNode = "";
            if (cami1.charAt(0) == 'P') tipusNode = "Paper";
            else if (cami1.charAt(0) == 'T') tipusNode = "Terme";
            else if (cami1.charAt(0) == 'C') tipusNode = "Conferencia";            
            else tipusNode = "Autor";
            
            ArrayList<String> nodes = controladorPresentacio.get_nodes(tipusNode);        
            for(int i = 0; i < nodes.size(); ++i){
                String node = nodes.get(i);
                String id = node.substring(0, node.indexOf('|'));
                String nom = node.substring(node.indexOf('|')+1, node.length());            
                table_model.addRow(new Object [] {id, nom});
            }

            if(!nou)TableNodoOrigen.setModel(table_model);
            else TableNuevoNodo.setModel(table_model);
        
    }
    
    
        private void inicialitzar_taula_node_desti() {
            String column_names[]= {"Id","Nom"};
            DefaultTableModel table_model = new DefaultTableModel(column_names, 0);
            //peligro
            ArrayList<String> camins = this.controladorPresentacio.get_camins();
            String camicod1 = camins.get(TableCami.getSelectedRow());
            String cami = camicod1.substring(0, camicod1.indexOf("|"));
            String tipusNode = "";
            if (cami.charAt(cami.length()-1) == 'P') tipusNode = "Paper";
            else if (cami.charAt(cami.length()-1) == 'T') tipusNode = "Terme";
            else if (cami.charAt(cami.length()-1) == 'C') tipusNode = "Conferencia";            
            else tipusNode = "Autor";
            
            ArrayList<String> nodes = controladorPresentacio.get_nodes(tipusNode);        
            for(int i = 0; i < nodes.size(); ++i){
                String node = nodes.get(i);
                String id = node.substring(0, node.indexOf('|'));
                String nom = node.substring(node.indexOf('|')+1, node.length());            
                table_model.addRow(new Object [] {id, nom});
            }

            TableNodoDestino.setModel(table_model);
        
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField GrauRellevancia;
    private javax.swing.JTable TableCami;
    private javax.swing.JTable TableNodoDestino;
    private javax.swing.JTable TableNodoOrigen;
    private javax.swing.JTable TableNuevoNodo;
    private javax.swing.JTextField TextDescripcio;
    private javax.swing.JComboBox<String> TipusBox;
    private javax.swing.JButton ejecutar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton select;
    private javax.swing.JButton torna;
    // End of variables declaration//GEN-END:variables
}
